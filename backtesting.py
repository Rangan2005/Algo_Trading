import pandas as pd

def backtest(df, initial_capital, commission_per_trade):
    df = df.dropna(subset=['Open','Close','signal'])
    position = 0
    entry_price = None
    entry_date = None
    trades = []
    dates = df.index

    for i in range(len(dates)-1):
        today, tomorrow = dates[i], dates[i+1]
        sig = df.at[today, 'signal']
        # Enter long
        if position == 0 and sig == 1:
            entry_price = df.at[tomorrow, 'Open']
            entry_date = tomorrow
            position = 1
        # Exit long
        elif position == 1 and sig == -1:
            exit_price = df.at[tomorrow, 'Open']
            exit_date = tomorrow
            ret_pct = (exit_price - entry_price) / entry_price
            trades.append({
                'entry_date': entry_date,
                'exit_date': exit_date,
                'entry_price': entry_price,
                'exit_price': exit_price,
                'return_pct': ret_pct
            })
            position = 0

    # If still in position at the end, close at last Close
    if position == 1 and entry_price is not None:
        exit_price = df['Close'].iloc[-1]
        exit_date = dates[-1]
        ret_pct = (exit_price - entry_price) / entry_price
        trades.append({
            'entry_date': entry_date,
            'exit_date': exit_date,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'return_pct': ret_pct
        })

    trades_df = pd.DataFrame(trades)
    if trades_df.empty:
        print("No trades were generated by the strategy.")
        return trades_df, {}

    # net_return_pct = return_pct - commission/entry_price
    trades_df['net_return_pct'] = trades_df.apply(
        lambda row: row['return_pct'] - commission_per_trade / row['entry_price'],
        axis=1
    )

    # Equity curve
    cap = initial_capital
    equity = []
    for net_r in trades_df['net_return_pct']:
        cap *= (1 + net_r)
        equity.append(cap)
    trades_df['equity'] = equity

    summary = {
        'trades': len(trades_df),
        'wins': (trades_df['return_pct'] > 0).sum(),
        'win_rate_pct': (trades_df['return_pct'] > 0).mean() * 100,
        'total_return_pct': (cap / initial_capital - 1) * 100
    }
    return trades_df, summary